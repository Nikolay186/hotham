use crate::{
    asset_importer::ImportContext,
    rendering::vertex::{self, Vertex},
};
use itertools::izip;
use nalgebra::vector;

/// Geometry for a mesh
/// Automatically generated by `gltf_loader`
#[derive(Debug, Clone, PartialEq)]
pub struct Primitive {
    /// Offset into the index buffer
    pub index_buffer_offset: usize,
    /// Offset into vertex buffer
    pub vertex_buffer_offset: usize,
    /// Number of vertices
    pub indices_count: u32,
    /// Material used
    pub material_id: u32,
}

impl Primitive {
    pub(crate) fn load(
        primitive_data: gltf::Primitive,
        import_context: &mut ImportContext,
        mesh_name: &str,
    ) -> Self {
        let mut indices = Vec::new();
        let mut positions = Vec::new();
        let mut tex_coords_0 = Vec::new();
        let mut tex_coords_1 = Vec::new();
        let mut normals = Vec::new();
        let mut joint_indices = Vec::new();
        let mut joint_weights = Vec::new();

        let reader = primitive_data.reader(|_| Some(&import_context.buffer));

        // Positions
        for v in reader
            .read_positions()
            .expect(&format!("Mesh {} has no positions!", mesh_name))
        {
            positions.push(vector![v[0], v[1], v[2]]);
        }

        // Indices
        if let Some(iter) = reader.read_indices() {
            for i in iter.into_u32() {
                indices.push(i);
            }
        }

        // Normals
        if let Some(iter) = reader.read_normals() {
            for v in iter {
                normals.push(vector![v[0], v[1], v[2]]);
            }
        } else {
            for _ in 0..positions.len() {
                normals.push(vector![0., 0., 0.]);
            }
        }

        if let Some(iter) = reader.read_tex_coords(0) {
            for v in iter.into_f32() {
                tex_coords_0.push(vector![v[0], v[1]]);
            }
        } else {
            for _ in 0..positions.len() {
                tex_coords_0.push(vector![0., 0.]);
            }
        }

        if let Some(iter) = reader.read_tex_coords(1) {
            for v in iter.into_f32() {
                tex_coords_1.push(vector![v[0], v[1]]);
            }
        } else {
            for _ in 0..positions.len() {
                tex_coords_1.push(vector![0., 0.]);
            }
        }

        if let Some(iter) = reader.read_joints(0) {
            for t in iter.into_u16() {
                joint_indices.push(vector![t[0] as f32, t[1] as f32, t[2] as f32, t[3] as f32]);
            }
        } else {
            for _ in 0..positions.len() {
                joint_indices.push(vector![0., 0., 0., 0.]);
            }
        }

        if let Some(iter) = reader.read_weights(0) {
            for t in iter.into_f32() {
                joint_weights.push(vector![t[0] as f32, t[1] as f32, t[2] as f32, t[3] as f32]);
            }
        } else {
            for _ in 0..positions.len() {
                joint_weights.push(vector![0., 0., 0., 0.]);
            }
        }

        let vertices: Vec<Vertex> = izip!(
            positions,
            normals,
            tex_coords_0,
            tex_coords_1,
            joint_indices,
            joint_weights
        )
        .into_iter()
        .map(Vertex::from_zip)
        .collect();

        // Grab the offsets
        let vertex_buffer = &mut import_context.render_context.resources.vertex_buffer;
        let index_buffer = &mut import_context.render_context.resources.index_buffer;
        let vertex_buffer_offset = vertex_buffer.len;
        let index_buffer_offset = index_buffer.len;

        // Update the buffers
        unsafe {
            vertex_buffer.append(&vertices);
            index_buffer.append(&indices);
        }

        Primitive {
            vertex_buffer_offset,
            index_buffer_offset,
            material_id: primitive_data.material().index().unwrap() as _,
            indices_count: indices.len() as _,
        }
    }
}
